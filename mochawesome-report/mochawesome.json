{
  "stats": {
    "suites": 4,
    "tests": 14,
    "passes": 14,
    "pending": 0,
    "failures": 0,
    "start": "2020-06-14T12:32:18.800Z",
    "end": "2020-06-14T12:32:19.436Z",
    "duration": 636,
    "testsRegistered": 14,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d73c57b3-0e16-405e-b7a8-8c7822e0a56c",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d03e7022-b2b2-4544-9da4-1c0d5c0361b0",
          "title": "Input format test:",
          "fullFile": "/Users/Evan/Documents/works/jerry.ai project/test/RangeList.test.js",
          "file": "/test/RangeList.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Input should not be an empty array",
              "fullTitle": "Input format test: Input should not be an empty array",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(app.add([])).to.not.be.ok;\nexpect(app.remove([])).to.not.be.ok;\napp.clear();",
              "err": {},
              "uuid": "f0424777-9ae4-4253-9fb1-e2f8fe73e07d",
              "parentUUID": "d03e7022-b2b2-4544-9da4-1c0d5c0361b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Left boundary should be less than right boundary",
              "fullTitle": "Input format test: Left boundary should be less than right boundary",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(app.add([9, 1])).to.not.be.ok;\nexpect(app.remove([8, 3])).to.not.be.ok;\napp.clear();",
              "err": {},
              "uuid": "b16cb768-5f44-4e73-978d-6950c7ee1b51",
              "parentUUID": "d03e7022-b2b2-4544-9da4-1c0d5c0361b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Elements of input array should not be more than 2",
              "fullTitle": "Input format test: Elements of input array should not be more than 2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(app.add([0, 1, 6])).to.not.be.ok;\nexpect(app.remove([3, 8, 24])).to.not.be.ok;\napp.clear();",
              "err": {},
              "uuid": "1a71035d-2860-4076-93fc-7ab9622d45f9",
              "parentUUID": "d03e7022-b2b2-4544-9da4-1c0d5c0361b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Elements of input array should not be less than 2",
              "fullTitle": "Input format test: Elements of input array should not be less than 2",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(app.add([8])).to.not.be.ok;\nexpect(app.remove([1])).to.not.be.ok;\napp.clear();",
              "err": {},
              "uuid": "ce81c58c-3005-4ed8-903c-4fc4af1fe748",
              "parentUUID": "d03e7022-b2b2-4544-9da4-1c0d5c0361b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Negative boundries should be OK",
              "fullTitle": "Input format test: Negative boundries should be OK",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(app.add([-10, -3])).to.be.ok;\nexpect(app.remove([-20, -3])).to.be.ok;\napp.clear();",
              "err": {},
              "uuid": "3123c2b2-0e8d-4bc4-8e1e-e370ca831d4a",
              "parentUUID": "d03e7022-b2b2-4544-9da4-1c0d5c0361b0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f0424777-9ae4-4253-9fb1-e2f8fe73e07d",
            "b16cb768-5f44-4e73-978d-6950c7ee1b51",
            "1a71035d-2860-4076-93fc-7ab9622d45f9",
            "ce81c58c-3005-4ed8-903c-4fc4af1fe748",
            "3123c2b2-0e8d-4bc4-8e1e-e370ca831d4a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "49e42435-5df3-46e7-9aea-2976b9f3d05d",
          "title": "Correctness test:",
          "fullFile": "/Users/Evan/Documents/works/jerry.ai project/test/RangeList.test.js",
          "file": "/test/RangeList.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Add and remove non-overlap intervals",
              "fullTitle": "Correctness test: Add and remove non-overlap intervals",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "app.add([1, 4]);\napp.add([8, 12]);\nexpect(app.rangeList[0].left).to.be.equal(1);\nexpect(app.rangeList[0].right).to.be.equal(4);\nexpect(app.rangeList[1].left).to.be.equal(8);\nexpect(app.rangeList[1].right).to.be.equal(12);\napp.remove([8, 12]);\nexpect(app.rangeList[0].left).to.be.equal(1);\nexpect(app.rangeList[0].right).to.be.equal(4);\nexpect(app.rangeList[1]).to.be.equal(undefined);\napp.clear();",
              "err": {},
              "uuid": "58ee2e0e-31b4-44a2-8dbd-d8de0ccbdf7b",
              "parentUUID": "49e42435-5df3-46e7-9aea-2976b9f3d05d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Add and remove overlapped intervals",
              "fullTitle": "Correctness test: Add and remove overlapped intervals",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "app.add([1, 4]);\napp.add([2, 12]);\nexpect(app.rangeList[0].left).to.be.equal(1);\nexpect(app.rangeList[0].right).to.be.equal(12);\nexpect(app.rangeList[1]).to.be.equal(undefined);\napp.remove([8, 9]);\nexpect(app.rangeList[0].left).to.be.equal(1);\nexpect(app.rangeList[0].right).to.be.equal(8);\nexpect(app.rangeList[1].left).to.be.equal(9);\nexpect(app.rangeList[1].right).to.be.equal(12);\napp.clear();",
              "err": {},
              "uuid": "ee2772ef-453f-44a8-883a-aaa455b0f243",
              "parentUUID": "49e42435-5df3-46e7-9aea-2976b9f3d05d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Add and remove zero-length intervals",
              "fullTitle": "Correctness test: Add and remove zero-length intervals",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "app.add([20, 35]);\napp.add([35, 35]);\nexpect(app.rangeList[0].left).to.be.equal(20);\nexpect(app.rangeList[0].right).to.be.equal(35);\nexpect(app.rangeList[1]).to.be.equal(undefined);\napp.remove([20, 20]);\nexpect(app.rangeList[0].left).to.be.equal(20);\nexpect(app.rangeList[0].right).to.be.equal(35);\nexpect(app.rangeList[1]).to.be.equal(undefined);\napp.clear();",
              "err": {},
              "uuid": "3b6583b0-9c4b-4ed1-bb1a-6a92064c71a8",
              "parentUUID": "49e42435-5df3-46e7-9aea-2976b9f3d05d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "58ee2e0e-31b4-44a2-8dbd-d8de0ccbdf7b",
            "ee2772ef-453f-44a8-883a-aaa455b0f243",
            "3b6583b0-9c4b-4ed1-bb1a-6a92064c71a8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1f5cb9f4-3644-407c-a0bf-332bc24a2b4a",
          "title": "Massive inputs test:",
          "fullFile": "/Users/Evan/Documents/works/jerry.ai project/test/RangeList.test.js",
          "file": "/test/RangeList.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding method should not throw exception under massive inputs",
              "fullTitle": "Massive inputs test: Adding method should not throw exception under massive inputs",
              "timedOut": false,
              "duration": 344,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let result = true;\nfor(let i = -1000000; i <= 1000000; ++i) {\n    result &= app.add([i, i + 3]);\n}\nexpect(result).to.be.ok;\nexpect(app.rangeList[0].left).to.be.equal(-1000000);\nexpect(app.rangeList[0].right).to.be.equal(1000003);",
              "err": {},
              "uuid": "3fa8e115-cb92-430e-a3ba-effd9ab46063",
              "parentUUID": "1f5cb9f4-3644-407c-a0bf-332bc24a2b4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Removing method should not throw exception under massive inputs",
              "fullTitle": "Massive inputs test: Removing method should not throw exception under massive inputs",
              "timedOut": false,
              "duration": 238,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let result = true;\nfor(let i = 1000000; i >= -1000000; --i) {\n    result &= app.remove([i - 5, i]);\n}\nexpect(result).to.be.ok;\nexpect(app.rangeList[0].left).to.be.equal(1000000);\nexpect(app.rangeList[0].right).to.be.equal(1000003);\napp.clear();",
              "err": {},
              "uuid": "9a4d6609-8725-450e-a48d-478dc4a36974",
              "parentUUID": "1f5cb9f4-3644-407c-a0bf-332bc24a2b4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adding massive disjoint intervals should be OK",
              "fullTitle": "Massive inputs test: Adding massive disjoint intervals should be OK",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let result = true;\nfor(let i = -1000000; i >= 1000000; i += 5) {\n    result &= app.remove([i, i + 3]);\n}\nexpect(result).to.be.ok;",
              "err": {},
              "uuid": "e41e72d6-bafd-4687-ac3f-4ec9122377cd",
              "parentUUID": "1f5cb9f4-3644-407c-a0bf-332bc24a2b4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Removing massive disjoint intervals should be OK",
              "fullTitle": "Massive inputs test: Removing massive disjoint intervals should be OK",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let result = true;\nfor(let i = -1000000; i >= 1000000; i += 5) {\n    result &= app.remove([i + 1, i + 4]);\n}\nexpect(result).to.be.ok;\napp.clear();",
              "err": {},
              "uuid": "207e7266-f1e1-47ba-98a7-34b423e5115d",
              "parentUUID": "1f5cb9f4-3644-407c-a0bf-332bc24a2b4a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3fa8e115-cb92-430e-a3ba-effd9ab46063",
            "9a4d6609-8725-450e-a48d-478dc4a36974",
            "e41e72d6-bafd-4687-ac3f-4ec9122377cd",
            "207e7266-f1e1-47ba-98a7-34b423e5115d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 582,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b55c6431-43b7-4786-8d34-f97cd12b299d",
          "title": "Random input test:",
          "fullFile": "/Users/Evan/Documents/works/jerry.ai project/test/RangeList.test.js",
          "file": "/test/RangeList.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adding method should not throw exception with random inputs",
              "fullTitle": "Random input test: Adding method should not throw exception with random inputs",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let result = true;\nlet left = 0, right = 0;\nfor(let i = 0; i <= 100000; ++i) {\n    left = Math.round(Math.random() * 10000);\n    while(right < left) right = Math.round(Math.random() * 10000);\n    result &= app.add([left, right]);\n}\nexpect(result).to.be.ok;",
              "err": {},
              "uuid": "7ede8d8b-c345-494a-828f-189f142da4a1",
              "parentUUID": "b55c6431-43b7-4786-8d34-f97cd12b299d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adding method should not throw exception with random inputs",
              "fullTitle": "Random input test: Adding method should not throw exception with random inputs",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let result = true;\nlet left = 0, right = 0;\nfor(let i = 0; i <= 100000; ++i) {\n    left = Math.round(Math.random() * 10000);\n    while(right < left) right = Math.round(Math.random() * 10000);\n    result &= app.remove([left, right]);\n}\nexpect(result).to.be.ok;\napp.clear();",
              "err": {},
              "uuid": "ed38d1d4-9a86-4a69-a22b-00988e422d6f",
              "parentUUID": "b55c6431-43b7-4786-8d34-f97cd12b299d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7ede8d8b-c345-494a-828f-189f142da4a1",
            "ed38d1d4-9a86-4a69-a22b-00988e422d6f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 38,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}